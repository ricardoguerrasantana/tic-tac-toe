{"version":3,"sources":["util/helpers.js","Components/Square/Square.js","Components/Board/Board.js","Components/Status/Status.js","Components/MoveHistoryList/MoveHistoryList.js","Components/ResetGame/ResetGame.js","Components/GameOver/GameOver.js","Components/Game/GameRendering.js","Components/Game/GameContainer.js","index.js"],"names":["calculateWinner","squares","lines","map","line","i","winnersResult","winner","every","square","isNotInWinnersResultSquare","num","includes","length","a","b","c","highlightSquares","slice","concat","filter","highlightWinnerSquares","squaresStyle","defaultStyle","highlightStyle","style","index","Square","props","className","squareStyle","onClick","handleClickSquare","value","Board","key","this","rowOfSquares","j","renderSquare","push","React","Component","Status","status","xIsNext","MoveHistoryList","moves","history","move","moveNum","sequence","console","log","text","locations","col","row","moveStyle","jumpTo","toggleOrder","ascendingOrder","reverse","ResetGame","resetGame","GameOver","DisplayDraw","DisplayWinner","GameRendering","currentSquares","gameOver","GameContainer","state","initialize","bind","Array","fill","setState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a66c589.chunk.js","sourcesContent":["export function calculateWinner(squares) {\r\n    /**\r\n     * Array indexes for posible winner lines.\r\n     */\r\n    let lines = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [3, 6, 9],\r\n        [1, 5, 9],\r\n        [3, 5, 7]\r\n    ];\r\n    /**\r\n     * Correction for zero-based index array.\r\n     */\r\n    lines = lines.map(line => line.map(i => --i));\r\n    /**\r\n     * Algorithm to search for a winner\r\n     * 1. Initialize the winner's result object to the no \r\n     * winner state. If there is not winner or draw yet, \r\n     * the function is going to return this default \r\n     * initialization.\r\n     */\r\n    let winnersResult = {\r\n        winner: null,\r\n        squares: [],\r\n    };\r\n    /**\r\n     * 2. Check if every square got already a mark. if so, \r\n     * set the winner's result object to the draw state.\r\n     */\r\n    if (squares.every((square) => square !== null)) {\r\n        winnersResult = {\r\n            winner: false, \r\n            squares: [],\r\n        };\r\n    } \r\n    /**\r\n     * 3. loop up for a winner. Then if it finds a winner \r\n     * sets the winner's result object with a winner and \r\n     * every square which is on a winner's line or lines.\r\n     */\r\n    const isNotInWinnersResultSquare = (num) => {\r\n        return !winnersResult.squares.includes(num);\r\n    }\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && \r\n            squares[a] === squares[b] && \r\n            squares[b] === squares[c]) {\r\n            const highlightSquares = \r\n            winnersResult.squares.slice().concat(\r\n                [a , b , c].filter(isNotInWinnersResultSquare)\r\n            );\r\n            winnersResult = {\r\n                winner: squares[a],\r\n                squares: highlightSquares,\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * 4. Return the winner's result object with the proper \r\n     * value in each case. This algorithm ensures not just to \r\n     * catch the first winner line found, but every \r\n     * simultaneous lines that could yeld the winner.\r\n     */\r\n    return winnersResult;\r\n}\r\n\r\nexport function highlightWinnerSquares(squaresStyle, highlightSquares, defaultStyle, highlightStyle) {\r\n    /**\r\n     * Store highlighting style in the styles array for every \r\n     * winner square and normal styles for the others.\r\n     */\r\n    const newSquaresStyle = squaresStyle.map((style, index) => {\r\n        if (highlightSquares.includes(index)) {\r\n            return `${defaultStyle} ${highlightStyle}`;\r\n        }\r\n        return `${defaultStyle}`;\r\n    });\r\n    \r\n    return newSquaresStyle;\r\n}","import React from 'react';\r\n\r\nexport const Square = (props) => {\r\n    return (\r\n        <button\r\n            className={props.squareStyle}\r\n            onClick={props.handleClickSquare}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { Square } from '../Square/Square';\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                key={i} \r\n                value={this.props.squares[i]}\r\n                squareStyle={this.props.squaresStyle[i]}\r\n                handleClickSquare={() => \r\n                    this.props.handleClickSquare(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const squares = [];\r\n        for (let i = 0; i < this.props.squares.length; i) {\r\n            const rowOfSquares = [];\r\n            for (let j = 0 ; j < 3; j++) {\r\n                const square = this.renderSquare(i++);\r\n                rowOfSquares.push(square);\r\n            }\r\n            squares.push(\r\n                <div \r\n                    key={`col${(i + 3) / 2}`}\r\n                    className=\"board-row\"\r\n                >\r\n                    {rowOfSquares}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>{squares}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nexport const Status = (props) => {\r\n    let status;\r\n    if (props.winner) {\r\n        status = `** Habemus Winner **`;\r\n    } else if (props.winner === false){\r\n        status = `Draw`;\r\n    } else {\r\n        status = `Next player: \r\n        ${props.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n    return (<div className=\"status\">{status}</div>);\r\n}","import React from 'react';\r\n\r\nexport const MoveHistoryList = (props) => {\r\n    const moves = props.history.map((move, moveNum) => {\r\n        // Get last marked position (i)\r\n        const sequence = props.sequence.slice();\r\n        const i = sequence[moveNum];\r\n        console.log(moveNum, i , sequence, move); \r\n        const text = (!moveNum ? <span>Game Start</span> : \r\n            <span>move #{moveNum} - <b>{move.squares[i]}</b> (\r\n            {props.locations[i].col} , \r\n            {props.locations[i].row})</span>);\r\n        return (\r\n            <li key={moveNum}\r\n                className={props.moveStyle[moveNum]}\r\n            >\r\n                <button \r\n                    className={props.moveStyle[moveNum]}\r\n                    /**\r\n                    Action to take back the game to the \r\n                    specified move \r\n                    */\r\n                    onClick={() => props.jumpTo(moveNum)}\r\n                >\r\n                {text}\r\n                </button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className=\"toggle\" \r\n                onClick={() => props.toggleOrder()}\r\n            >\r\n                Toggle the List Order\r\n            </button>\r\n            <p>Move number - Player - <br />\r\n            Location (column, Row)</p>\r\n            <ol>\r\n            {props.ascendingOrder ? \r\n            moves : moves.slice().reverse()}\r\n            </ol>\r\n            <p>Press to go back to any <br /> \r\n            move and continue playing</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport const ResetGame = (props) => {\r\n    return (\r\n        <div className=\"reset-game\">\r\n            <button \r\n                className=\"play-again\"\r\n                onClick={() => props.resetGame()}\r\n            >{props.text}</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\n\r\nexport const GameOver = (props) => {\r\n    const text = props.winner ? \r\n        <DisplayWinner winner={props.winner}/> : \r\n        <DisplayDraw/>;\r\n    return (\r\n        <div className=\"game-over\">\r\n            {text}\r\n            <ResetGame\r\n                text=\"Play Again\"\r\n                resetGame={() => props.resetGame()}\r\n            ></ResetGame>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DisplayDraw = () => {\r\n    return (<h1>Draw!</h1>);\r\n}\r\n\r\nconst DisplayWinner = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>*{props.winner}*</h1>\r\n            <h2>Winner</h2>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n// Components\r\nimport Board from '../Board/Board';\r\nimport { Status } from '../Status/Status';\r\nimport { MoveHistoryList } from '../MoveHistoryList/MoveHistoryList';\r\nimport { GameOver } from '../GameOver/GameOver';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\n\r\nexport const GameRendering = (props) => {\r\n    const history = props.history.slice(0, props.moveNum + 1);\r\n    const currentSquares = \r\n    history[history.length - 1].squares.slice();\r\n    const gameOver = (\r\n        <GameOver\r\n            winner={props.winner}\r\n            resetGame={() => props.resetGame()}\r\n        ></GameOver>\r\n    );\r\n    const resetGame = (\r\n        <ResetGame\r\n            text=\"Reset Game\" \r\n            resetGame={() => props.resetGame()}\r\n        ></ResetGame>\r\n    );\r\n    \r\n    return (\r\n        <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                        squares={currentSquares}\r\n                        xIsNext={props.xIsNext} \r\n                        winner={props.winner} \r\n                        squaresStyle={props.squaresStyle} \r\n                        handleClickSquare={(i) => {\r\n                            return props.handleClickSquare(i);\r\n                        }}\r\n                    />\r\n                    {(props.winner || props.winner === false) ?\r\n                     gameOver : resetGame} \r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <Status\r\n                        xIsNext={props.xIsNext} \r\n                        winner={props.winner}\r\n                    ></Status>\r\n                    <MoveHistoryList\r\n                        history={props.history}\r\n                        sequence={props.sequence}\r\n                        locations={props.locations}\r\n                        ascendingOrder={props.ascendingOrder}\r\n                        moveStyle={props.moveStyle}\r\n                        jumpTo={(moveNum) => props.jumpTo(moveNum)}\r\n                        toggleOrder={() => props.toggleOrder()}\r\n                    ></MoveHistoryList>\r\n                </div>\r\n            </div>\r\n    );\r\n}","import React from 'react';\r\n// Helper Functions\r\nimport { calculateWinner } from '../../util/helpers';\r\nimport { highlightWinnerSquares } from '../../util/helpers';\r\n// Pesentational Component\r\nimport { GameRendering } from './GameRendering';\r\n\r\nclass GameContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.initialize();\r\n\r\n        this.handleClickSquare = this.handleClickSquare.bind(this);\r\n        this.jumpTo = this.jumpTo.bind(this);\r\n        this.toggleOrder = this.toggleOrder.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n    }\r\n\r\n    initialize() {\r\n        return {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                }\r\n            ],\r\n            xIsNext: true,\r\n            winner: null,\r\n            moveNum: 0, \r\n            sequence: [\"start\"],\r\n            locations: [\r\n                {col: 1, row: 1},\r\n                {col: 2, row: 1},\r\n                {col: 3, row: 1},\r\n                {col: 1, row: 2},\r\n                {col: 2, row: 2},\r\n                {col: 3, row: 2},\r\n                {col: 1, row: 3},\r\n                {col: 2, row: 3},\r\n                {col: 3, row: 3},\r\n            ],\r\n            ascendingOrder: true,\r\n            squaresStyle: Array(9).fill(\"square\"), \r\n            moveStyle: [\"bold\"],\r\n        }\r\n    };\r\n\r\n    handleClickSquare(i) {\r\n        // Make an immutable copy of the last set of games's moves\r\n        const history = \r\n        this.state.history.slice(0 , this.state.moveNum + 1);\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        // Disable the move if there is a winner \r\n        // or if the square's been marked\r\n        if (this.state.winner || currentSquares[i]) {\r\n            return;\r\n        }\r\n        //Assign the porper value for the clicked square\r\n        currentSquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        // Make an immutable copy of the sequence of \r\n        // the marked positions\r\n        const sequence = \r\n        this.state.sequence.slice(0 , this.state.moveNum + 1);\r\n        console.log(sequence);\r\n        //Determine if there is a winner due the last move \r\n        const winnersResult = calculateWinner(currentSquares);\r\n        const squaresStyle = \r\n            highlightWinnerSquares(this.state.squaresStyle, \r\n            winnersResult.squares, \"square\", \r\n            \"highlighted-square\");\r\n        const moveStyle = \r\n        this.state.moveStyle.slice(0 , this.state.moveNum + 1).\r\n        map(() => \"normal\");\r\n        console.log(moveStyle);\r\n        this.setState({\r\n            // Add the last set of game's moves to the array \r\n            // which track game's moves (unlike push() method, \r\n            // concat() method doesn't muatate the \r\n            // original array)\r\n            history: history.concat(\r\n                [\r\n                    {\r\n                        squares: currentSquares,\r\n                    }\r\n                ]\r\n            ),\r\n            xIsNext: !this.state.xIsNext,\r\n            winner: winnersResult.winner, \r\n            moveNum: this.state.moveNum + 1, \r\n            sequence: sequence.concat([i]),\r\n            squaresStyle: squaresStyle,\r\n            moveStyle: moveStyle.concat([\"bold\"]),\r\n        });\r\n    }\r\n    /**\r\n     * Show the move of the indicated moveNum\r\n     */\r\n    jumpTo(moveNum) {\r\n        /**\r\n         * History of the indicated moveNum\r\n         */\r\n        const history = \r\n        this.state.history.slice(0, moveNum + 1);\r\n        /**\r\n         * Squares' state of the picked moveNum\r\n         */\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        const winnersResult = calculateWinner(currentSquares);\r\n        const squaresStyle = \r\n            highlightWinnerSquares(this.state.squaresStyle, \r\n            winnersResult.squares, \"square\", \r\n            \"highlighted-square\");\r\n        const moveStyle = \r\n        this.state.moveStyle.slice().map((style, index) => {\r\n            if (index === moveNum) {\r\n                return \"bold\";\r\n            }\r\n            return \"normal\";\r\n        });\r\n\r\n        this.setState({\r\n            // !(moveNum % 2) this is: because X starts \r\n            // first (moveNum 0) it is even, then module of \r\n            // a even number is 0, evaluated as false which \r\n            // is turned to the opposite by \r\n            // the Logical NOT operator (!) \r\n            xIsNext: !(moveNum % 2), \r\n            winner: winnersResult.winner,\r\n            moveNum: moveNum, \r\n            squaresStyle: squaresStyle,\r\n            moveStyle: moveStyle,\r\n        });\r\n    }\r\n\r\n    toggleOrder() {\r\n        this.setState({\r\n            ascendingOrder: this.state.ascendingOrder ? \r\n            false : true\r\n        });\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState(this.initialize());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <GameRendering \r\n                history={this.state.history}\r\n                xIsNext={this.state.xIsNext} \r\n                winner={this.state.winner}\r\n                moveNum={this.state.moveNum}\r\n                sequence={this.state.sequence} \r\n                locations={this.state.locations} \r\n                ascendingOrder={this.state.ascendingOrder}\r\n                squaresStyle={this.state.squaresStyle}\r\n                moveStyle={this.state.moveStyle}\r\n                handleClickSquare={(i) => \r\n                    this.handleClickSquare(i)}\r\n                jumpTo={(moveNum) => this.jumpTo(moveNum)}\r\n                toggleOrder={() => this.toggleOrder()}\r\n                resetGame={() => this.resetGame()}\r\n            ></GameRendering>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GameContainer from './Components/Game/GameContainer';\r\n\r\nReactDOM.render(\r\n    <GameContainer />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}