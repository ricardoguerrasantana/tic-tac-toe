{"version":3,"sources":["util/helpers.js","Components/Square/Square.js","Components/Board/Board.js","Components/Status/Status.js","Components/MoveList/MoveList.js","Components/ResetGame/ResetGame.js","Components/GameOver/GameOver.js","Components/Game/GameRendering.js","Components/Game/GameContainer.js","index.js"],"names":["calculateWinner","squares","lines","map","line","i","winnersResult","winner","every","square","isNotInWinnersResultSquare","num","includes","length","a","b","c","highlightSquares","slice","concat","filter","styleWinnerLine","styles","defaultStyle","highlightStyle","newStyles","Array","fill","Square","props","className","style","onClick","handleClickSquare","value","Board","key","this","rowOfSquares","j","renderSquare","push","React","Component","Status","status","xIsNext","MoveHistoryList","moves","history","move","step","sequence","text","locations","col","row","jumpTo","toggleOrder","ascendingOrder","reverse","ResetGame","resetGame","GameOver","DisplayDraw","DisplayWinner","GameRendering","currentSquares","gameOver","GameContainer","state","initialize","bind","setState","currentHistory","currentSequence","imgWinner","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10eccbff.chunk.js","sourcesContent":["export function calculateWinner(squares) {\r\n    /**\r\n     * Array indexes for posible winner lines.\r\n     */\r\n    let lines = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [3, 6, 9],\r\n        [1, 5, 9],\r\n        [3, 5, 7]\r\n    ];\r\n    /**\r\n     * Correction for zero-based index array.\r\n     */\r\n    lines = lines.map(line => line.map(i => --i));\r\n    /**\r\n     * Algorithm to search for a winner\r\n     * 1. Initialize the winner's result object to the no \r\n     * winner state. If there is not winner or draw yet, \r\n     * the function is going to return this default \r\n     * initialization.\r\n     */\r\n    let winnersResult = {\r\n        winner: null,\r\n        squares: [],\r\n    };\r\n    /**\r\n     * 2. Check if every square got already a mark. if so, \r\n     * set the winner's result object to the draw state.\r\n     */\r\n    if (squares.every((square) => square !== null)) {\r\n        winnersResult = {\r\n            winner: false, \r\n            squares: [],\r\n        };\r\n    } \r\n    /**\r\n     * 3. loop up for a winner. Then if it finds a winner \r\n     * sets the winner's result object with a winner and \r\n     * every square which is on a winner's line or lines.\r\n     */\r\n    const isNotInWinnersResultSquare = (num) => {\r\n        return !winnersResult.squares.includes(num);\r\n    }\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && \r\n            squares[a] === squares[b] && \r\n            squares[b] === squares[c]) {\r\n            const highlightSquares = \r\n            winnersResult.squares.slice().concat(\r\n                [a , b , c].filter(isNotInWinnersResultSquare)\r\n            );\r\n            winnersResult = {\r\n                winner: squares[a],\r\n                squares: highlightSquares,\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * 4. Return the winner's result object with the proper \r\n     * value in each case. This algorithm ensures not just to \r\n     * catch the first winner line found, but every \r\n     * simultaneous lines that could yeld the winner.\r\n     */\r\n    return winnersResult;\r\n}\r\n\r\nexport function styleWinnerLine(styles, highlightSquares, defaultStyle, highlightStyle) {\r\n    /**\r\n     * Initialize a default styles array\r\n     */\r\n    const newStyles = Array(styles.length).fill(defaultStyle);\r\n    /**\r\n     * Modify the style of every square to highlight\r\n     */\r\n    for (let i = 0; i < styles.length; i++) {\r\n        if (highlightSquares.includes(i)) {\r\n            newStyles[i] = `${newStyles[i]} ${highlightStyle}`;\r\n        }        \r\n    }\r\n    return newStyles;\r\n}","import React from 'react';\r\n\r\nexport const Square = (props) => {\r\n    return (\r\n        <button\r\n            className={props.style}\r\n            onClick={props.handleClickSquare}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { Square } from '../Square/Square';\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                key={i} \r\n                value={this.props.squares[i]}\r\n                style={this.props.styles[i]}\r\n                handleClickSquare={() => this.props.handleClickSquare(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const squares = [];\r\n        for (let i = 0; i < this.props.squares.length; i) {\r\n            const rowOfSquares = [];\r\n            for (let j = 0 ; j < 3; j++) {\r\n                const square = this.renderSquare(i++);\r\n                rowOfSquares.push(square);\r\n            }\r\n            squares.push(\r\n                <div \r\n                    key={`col${(i + 3) / 2}`}\r\n                    className=\"board-row\"\r\n                >\r\n                {rowOfSquares}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>{squares}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nexport const Status = (props) => {\r\n    let status;\r\n    if (props.winner) {\r\n        status = `** Habemus Winner **`;\r\n    } else if (props.winner === false){\r\n        status = `Draw`;\r\n    } else {\r\n        status = `Next player: \r\n        ${props.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n    return (<div className=\"status\">{status}</div>);\r\n}","import React from 'react';\r\n\r\nexport const MoveHistoryList = (props) => {\r\n    const moves = props.history.map((move, step) => {\r\n        // Get last marked position (i)\r\n        const sequence = props.sequence.slice();\r\n        const i = sequence[step - 1];\r\n        const text = (!step ? <span>Game Start</span> : \r\n            <span>move #{step} - <b>{move.squares[i]}</b> (\r\n            {props.locations[i].col} , \r\n            {props.locations[i].row})</span>);\r\n        return (\r\n            <li key={step}\r\n                className=\"item\"\r\n            >\r\n                <button \r\n                // Action to take back the game to \r\n                // the specified move\r\n                onClick={() => props.jumpTo(step)}\r\n                >\r\n                {text}\r\n                </button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className=\"toggle\" \r\n                onClick={() => props.toggleOrder()}\r\n            >\r\n                Toggle the List Order\r\n            </button>\r\n            <p>Move number - Player - <br />\r\n            Location (column, Row)</p>\r\n            <ol>\r\n            {props.ascendingOrder ? \r\n            moves : moves.slice().reverse()}\r\n            </ol>\r\n            <p>Press to go back to any <br /> \r\n            move and continue playing</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport const ResetGame = (props) => {\r\n    return (\r\n        <div className=\"reset-game\">\r\n            <button \r\n                className=\"play-again\"\r\n                onClick={() => props.resetGame()}\r\n            >{props.text}</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\n\r\nexport const GameOver = (props) => {\r\n    const text = props.winner ? \r\n        <DisplayWinner winner={props.winner}/> : \r\n        <DisplayDraw/>;\r\n    return (\r\n        <div className=\"game-over\">\r\n            {text}\r\n            <ResetGame\r\n                text=\"Play Again\"\r\n                resetGame={() => props.resetGame()}\r\n            ></ResetGame>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DisplayDraw = () => {\r\n    return (<h1>Draw!</h1>);\r\n}\r\n\r\nconst DisplayWinner = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>*{props.winner}*</h1>\r\n            <h2>Winner</h2>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n// Components\r\nimport Board from '../Board/Board';\r\nimport { Status } from '../Status/Status';\r\nimport { MoveHistoryList } from '../MoveList/MoveList';\r\nimport { GameOver } from '../GameOver/GameOver';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\n\r\nexport const GameRendering = (props) => {\r\n    const history = props.history;\r\n    const currentSquares = \r\n    history[history.length - 1].squares.slice();\r\n    const gameOver = (\r\n        <GameOver\r\n            winner={props.winner}\r\n            resetGame={() => props.resetGame()}\r\n        ></GameOver>\r\n    );\r\n    const resetGame = (\r\n        <ResetGame\r\n            text=\"Reset Game\" \r\n            resetGame={() => props.resetGame()}\r\n        ></ResetGame>\r\n    );\r\n    \r\n    return (\r\n        <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                        squares={currentSquares}\r\n                        xIsNext={props.xIsNext} \r\n                        winner={props.winner} \r\n                        styles={props.styles} \r\n                        handleClickSquare={(i) => {\r\n                            return props.handleClickSquare(i);\r\n                        }}\r\n                    />\r\n                    {(props.winner || props.winner === false) ?\r\n                     gameOver : resetGame} \r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <Status\r\n                        xIsNext={props.xIsNext} \r\n                        winner={props.winner}\r\n                    ></Status>\r\n                    <MoveHistoryList\r\n                        history={props.history}\r\n                        sequence={props.sequence}\r\n                        locations={props.locations}\r\n                        ascendingOrder={props.ascendingOrder}\r\n                        jumpTo={(step) => props.jumpTo(step)}\r\n                        toggleOrder={() => props.toggleOrder()}\r\n                    ></MoveHistoryList>\r\n                </div>\r\n            </div>\r\n    );\r\n}","import React from 'react';\r\n// Helper Functions\r\nimport { calculateWinner } from '../../util/helpers';\r\nimport { styleWinnerLine } from '../../util/helpers';\r\n// Pesentational Component\r\nimport { GameRendering } from './GameRendering';\r\n\r\nclass GameContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.initialize();\r\n\r\n        this.handleClickSquare = this.handleClickSquare.bind(this);\r\n        this.jumpTo = this.jumpTo.bind(this);\r\n        this.toggleOrder = this.toggleOrder.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n    }\r\n\r\n    initialize() {\r\n        return {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                }\r\n            ],\r\n            xIsNext: true,\r\n            winner: null,\r\n            sequence: [],\r\n            locations: [\r\n                {col: 1, row: 1},\r\n                {col: 2, row: 1},\r\n                {col: 3, row: 1},\r\n                {col: 1, row: 2},\r\n                {col: 2, row: 2},\r\n                {col: 3, row: 2},\r\n                {col: 1, row: 3},\r\n                {col: 2, row: 3},\r\n                {col: 3, row: 3},\r\n            ],\r\n            ascendingOrder: true,\r\n            styles: Array(9).fill(\"square\"),\r\n        }\r\n    };\r\n\r\n    handleClickSquare(i) {\r\n        // Make an immutable copy of the last set of games's moves\r\n        const history = this.state.history.slice();\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        // Disable the move if there is a winner \r\n        // or if the square's been marked\r\n        if (this.state.winner || currentSquares[i]) {\r\n            return;\r\n        }\r\n        //Assign the porper value for the clicked square\r\n        currentSquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        // Make an immutable copy of the sequence of \r\n        // the marked positions\r\n        const sequence = \r\n        this.state.sequence.slice();\r\n        //Determine if there is a winner due the last move \r\n        const winnersResult = calculateWinner(currentSquares);\r\n        let styles = this.state.styles;\r\n        if (winnersResult.winner) {\r\n            styles = styleWinnerLine(styles, \r\n                winnersResult.squares, \"square\", \r\n                \"highlighted-square\");\r\n        }\r\n        this.setState({\r\n            // Add the last set of game's moves to the array \r\n            // which track game's moves (unlike push() method, \r\n            // concat() method doesn't muatate the \r\n            // original array)\r\n            history: history.concat(\r\n                [\r\n                    {\r\n                        squares: currentSquares,\r\n                    }\r\n                ]\r\n                ),\r\n            xIsNext: !this.state.xIsNext,\r\n            winner: winnersResult.winner,\r\n            sequence: sequence.concat([i]),\r\n            styles: styles,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        // Reset the game to the indicated step\r\n        const currentHistory = \r\n        this.state.history.slice(0, step + 1);\r\n        const currentSquares = \r\n        currentHistory[currentHistory.length - 1].squares.slice();\r\n        const winnersResult = calculateWinner(currentSquares);\r\n        const currentSequence = this.state.sequence.slice(0, step);\r\n        let styles = this.state.styles;\r\n        styles = styleWinnerLine(currentSquares, styles, \"square\", \"highlighted-square\");\r\n        this.setState({\r\n            history: currentHistory, \r\n            // !(step % 2) this is: because X starts \r\n            // first (step 0) it is even, then module of \r\n            // a even number is 0, evaluated as false which \r\n            // is turned to the opposite by \r\n            // the Logical NOT operator (!) \r\n            xIsNext: !(step % 2), \r\n            winner: winnersResult.winner,\r\n            sequence: currentSequence,\r\n            styles: styles,\r\n        });\r\n    }\r\n\r\n    toggleOrder() {\r\n        this.setState({\r\n            ascendingOrder: this.state.ascendingOrder ? false : true\r\n        });\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState(this.initialize());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <GameRendering \r\n                history={this.state.history}\r\n                xIsNext={this.state.xIsNext} \r\n                winner={this.state.winner}\r\n                sequence={this.state.sequence} \r\n                locations={this.state.locations} \r\n                ascendingOrder={this.state.ascendingOrder}\r\n                styles={this.state.styles}\r\n                imgWinner={this.state.imgWinner}\r\n                handleClickSquare={(i) => this.handleClickSquare(i)}\r\n                jumpTo={(step) => this.jumpTo(step)}\r\n                toggleOrder={() => this.toggleOrder()}\r\n                resetGame={() => this.resetGame()}\r\n            ></GameRendering>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GameContainer from './Components/Game/GameContainer';\r\n\r\nReactDOM.render(\r\n    <GameContainer />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}