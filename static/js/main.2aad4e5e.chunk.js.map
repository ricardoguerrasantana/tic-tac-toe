{"version":3,"sources":["util/helpers.js","Components/Square/Square.js","Components/Board/Board.js","Components/MoveHistoryList/MoveHistoryList.js","Components/Status/Status.js","Components/ResetGame/ResetGame.js","Components/GameOver/GameOver.js","Components/PlayerSettings/PlayerSettings.js","Components/Game/GameRendering.js","Components/Game/GameContainer.js","index.js"],"names":["calculateWinner","squares","players","lines","map","line","i","winnersResult","winner","every","square","isNotInWinnersResultSquare","num","includes","length","a","b","c","highlightSquares","slice","concat","filter","name","Square","props","className","squareStyle","id","onClick","handleClickSquare","value","Board","key","this","numOfCols","row","col","push","renderSquare","numOfRows","board","generateRow","generateBoard","React","Component","MoveHistoryList","moveNum","moves","history","move","sequence","text","locations","boldCurrentMove","jumpTo","sort","firstEl","secondEl","toggleMoveHistoryList","toggleOrder","reversed","Status","status","xIsNext","ResetGame","resetGame","GameOver","object","playerMark","Object","keys","find","PlayerSettings","onChange","e","changePlayerName","changeColor","GameRendering","currentSquares","gameOver","GameContainer","state","initialize","bind","applyPlayersColor","Array","fill","rowNum","colNum","color","setState","console","log","target","assign","playerXColor","formatColor","X","playerOColor","O","forEach","el","document","getElementById","style","backgroundColor","playerXElementsColor","getElementsByClassName","entries","playerOElementsColor","playerXElementsBacgroundColor","playerOElementsBacgroundColor","noneBackgroundColorElements","whiteColorElements","arr","join","Math","floor","random","islight","chooseDarkColor","reduce","ReactDOM","render"],"mappings":"8QAAO,SAASA,EAAgBC,EAASC,GAIrC,IAAIC,EAAQ,CACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAKXA,EAAQA,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKD,KAAI,SAAAE,GAAC,QAAMA,QAQ1C,IAAIC,EAAgB,CAChBC,OAAQ,KACRP,QAAS,IAMTA,EAAQQ,OAAM,SAACC,GAAD,OAAuB,OAAXA,OAC1BH,EAAgB,CACZC,QAAQ,EACRP,QAAS,KAWjB,IAHA,IAAMU,EAA6B,SAACC,GAChC,OAAQL,EAAcN,QAAQY,SAASD,IAElCN,EAAI,EAAGA,EAAIH,EAAMW,OAAQR,IAAK,CAAC,IAAD,cACjBH,EAAMG,GADW,GAC5BS,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIhB,EAAQc,IACRd,EAAQc,KAAOd,EAAQe,IACvBf,EAAQe,KAAOf,EAAQgB,GAAI,CAC3B,IAAMC,EACNX,EAAcN,QAAQkB,QAAQC,OAC1B,CAACL,EAAIC,EAAIC,GAAGI,OAAOV,IAEvBJ,EAAgB,CACZC,OAAQN,EAAQD,EAAQc,IAAIO,KAC5BrB,QAASiB,IAUrB,OAAOX,EClEJ,IAAMgB,EAAS,SAACC,GACnB,OACI,4BACIC,UAAWD,EAAME,YACjBC,GAAIH,EAAMG,GACVC,QAASJ,EAAMK,mBAEdL,EAAMM,QCwCJC,E,2KA5CEzB,GAAI,IAAD,OACZ,OACI,kBAAC,EAAD,CACI0B,IAAK1B,EACLqB,GAAE,iBAAYrB,GACdwB,MAAOG,KAAKT,MAAMvB,QAAQK,GAC1BoB,YAAa,SACbG,kBAAmB,kBACf,EAAKL,MAAMK,kBAAkBvB,Q,kCAKjC4B,EAAWC,GAGnB,IAFA,IAAI7B,EAAI6B,EAAMD,EACR7B,EAAO,GACJ+B,EAAM,EAAGA,EAAMF,EAAWE,IAC/B/B,EAAKgC,KAAKJ,KAAKK,aAAahC,MAEhC,OAAOD,I,oCAGG6B,EAAYK,GAEtB,IADA,IAAMC,EAAQ,GACLL,EAAM,EAAIA,EAAMI,EAAYJ,IACjCK,EAAMH,KACF,yBACIL,IAAG,aAAQG,GACXV,UAAU,aAETQ,KAAKQ,YAAYP,EAAWC,KAIzC,OAAOK,I,+BAIP,OACI,6BAAMP,KAAKS,cAAcT,KAAKT,MAAMY,IAAMH,KAAKT,MAAMW,U,GAxC7CQ,IAAMC,WCkEXC,E,8KAnEKC,GACZ,OAAIb,KAAKT,MAAMsB,UAAYA,EAChB,OAEA,W,+BAIL,IAAD,OACCC,EAAQd,KAAKT,MAAMwB,QAAQ5C,KAAI,SAAC6C,EAAMH,GAExC,IACMxC,EADW,EAAKkB,MAAM0B,SAAS/B,QAClB2B,GACbK,EAASL,EACX,uCAAaA,EAAb,MAAyB,IACzB,uBAAGrB,UAAS,gBAAWwB,EAAKhD,QAAQK,GAAxB,WACX2C,EAAKhD,QAAQK,IAFd,KAGC,EAAKkB,MAAM4B,UAAU9C,GAAG8B,IAHzB,KAIC,EAAKZ,MAAM4B,UAAU9C,GAAG6B,IAJzB,KADqB,4CAMzB,OACI,wBAAIH,IAAKc,EACLrB,UAAW,EAAK4B,gBAAgBP,IAEhC,4BACIrB,UAAW,EAAK4B,gBAAgBP,GAKhClB,QAAS,kBAAM,EAAKJ,MAAM8B,OAAOR,KAEpCK,OAcb,OARAJ,EAAMQ,MAAK,SAACC,EAASC,GACjB,OAAK,EAAKjC,MAAMkC,sBACLD,EAASzB,IAAMwB,EAAQxB,IAEvBwB,EAAQxB,IAAMyB,EAASzB,OAKlC,6BACMe,EAAMjC,OAAS,EACjB,4BACIW,UAAU,SACVG,QAAS,kBAAM,EAAKJ,MAAMmC,YAAY,2BAF1C,yBAMI,GACJ,qDAA0B,6BAA1B,0BAEA,wBAAIC,SAAU3B,KAAKT,MAAMkC,uBACxBX,GAED,sDAA2B,6BAA3B,kC,GA7DcJ,IAAMC,WCAvBiB,EAAS,SAACrC,GACnB,IAAIsC,EAUJ,OARIA,EADAtC,EAAMjB,cAAcC,OACV,2BAAG,qDACyB,IAA/BgB,EAAMjB,cAAcC,OACjB,mCAEA,0CACV,uBAAGiB,UAAS,gBAAWD,EAAMuC,QAAU,IAAM,IAAjC,WACXvC,EAAMuC,QAAU,IAAM,MAEnB,yBAAKtC,UAAU,UAAUqC,ICXxBE,EAAY,SAACxC,GACtB,OACI,yBAAKC,UAAU,cACX,4BACIA,UAAU,aACVG,QAAS,kBAAMJ,EAAMyC,cACvBzC,EAAM2B,QCLPe,EAAW,SAAC1C,GACrB,IAAI2B,EA2BqBgB,EAAQ7C,EA1BjC,GAAIE,EAAMjB,cAAcC,OAAQ,CAC5B,IAAM4D,GAyBeD,EAxBD3C,EAAMtB,QAwBGoB,EAxBME,EAAMjB,cAAcC,OAyBpD6D,OAAOC,KAAKH,GAAQI,MAAK,SAAAvC,GAAG,OAAImC,EAAOnC,GAAKV,OAASA,MAxBxD6B,EACA,6BACI,gCAAK,0BAAM1B,UAAS,gBAAW2C,EAAX,WACnB5C,EAAMjB,cAAcC,QADrB,KAEA,4CAIJ2C,EACI,qCAGR,OACI,yBAAK1B,UAAU,aACV0B,EACD,kBAAC,EAAD,CACIA,KAAK,aACLc,UAAW,kBAAMzC,EAAMyC,iBCvBhC,IAAMO,EAAiB,SAAChD,GAC3B,OACI,yBAAKC,UAAU,mBACX,uBACIA,UAAU,2BADd,UAESD,EAAM4C,WAFf,YAGA,2BACI3C,UAAS,kCAA6BD,EAAM4C,WAAnC,UACTK,SAAU,SAACC,GAAD,OACNlD,EAAMmD,iBAAiBD,EACvBlD,EAAM4C,eAEd,4BACI3C,UAAS,oCAA+BD,EAAM4C,WAArC,iCACTxC,QAAS,SAACwC,GAAD,OACL5C,EAAMoD,YAAYpD,EAAM4C,cAHhC,gBCLCS,EAAgB,SAACrD,GAC1B,IAAMwB,EAAUxB,EAAMwB,QAAQ7B,MAAM,EAAGK,EAAMsB,QAAU,GACjDgC,EACN9B,EAAQA,EAAQlC,OAAS,GAAGb,QAAQkB,QAC9B4D,EACF,kBAAC,EAAD,CACI7E,QAASsB,EAAMtB,QACfK,cAAeiB,EAAMjB,cACrB0D,UAAW,kBAAMzC,EAAMyC,eAGzBA,EACF,kBAAC,EAAD,CACId,KAAK,aACLc,UAAW,kBAAMzC,EAAMyC,eAI/B,OACA,yBAAKxC,UAAU,QACX,yBAAKA,UAAU,gBACX,kBAAC,EAAD,CACI2C,WAAY,IACZlE,QAASsB,EAAMtB,QACfyE,iBAAkB,SAACD,EAAGN,GAClB,OAAO5C,EAAMmD,iBAAiBD,EAAGN,IAErCQ,YAAa,SAACR,GAAD,OACT5C,EAAMoD,YAAYR,MAE1B,kBAAC,EAAD,CACIA,WAAY,IACZlE,QAASsB,EAAMtB,QACfyE,iBAAkB,SAACD,EAAGN,GAClB,OAAO5C,EAAMmD,iBAAiBD,EAAGN,IAErCQ,YAAa,SAACR,GAAD,OACT5C,EAAMoD,YAAYR,OAG9B,yBAAK3C,UAAU,aACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIW,IAAKZ,EAAMY,IACXD,IAAKX,EAAMW,IACXlC,QAAS6E,EACTf,QAASvC,EAAMuC,QACfxD,cAAeiB,EAAMjB,cACrBsB,kBAAmB,SAACvB,GAChB,OAAOkB,EAAMK,kBAAkBvB,MAGrCkB,EAAMjB,cAAcC,SAAyC,IAA/BgB,EAAMjB,cAAcC,OAChDuE,EAAWd,GAEnB,yBAAKxC,UAAU,aACX,kBAAC,EAAD,CACIsC,QAASvC,EAAMuC,QACfxD,cAAeiB,EAAMjB,gBAEzB,kBAAC,EAAD,CACIyC,QAASxB,EAAMwB,QACfE,SAAU1B,EAAM0B,SAChBJ,QAAStB,EAAMsB,QACfM,UAAW5B,EAAM4B,UACjBM,sBACKlC,EAAMkC,sBACXJ,OAAQ,SAACR,GAAD,OAAatB,EAAM8B,OAAOR,IAClCa,YAAa,SAAC3B,GAAD,OAASR,EAAMmC,YAAY3B,UC+N7CgD,E,kDArSX,WAAYxD,GAAQ,IAAD,8BACf,cAAMA,IAEDyD,MAAQ,EAAKC,aAElB,EAAKrD,kBAAoB,EAAKA,kBAAkBsD,KAAvB,gBACzB,EAAK7B,OAAS,EAAKA,OAAO6B,KAAZ,gBACd,EAAKxB,YAAc,EAAKA,YAAYwB,KAAjB,gBACnB,EAAKlB,UAAY,EAAKA,UAAUkB,KAAf,gBACjB,EAAKR,iBAAmB,EAAKA,iBAAiBQ,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAVV,E,yDAuBf,IATA,IAIMnC,EAAU,CAAC,CACb/C,QAASoF,MAFQjD,GAEYkD,KAAK,QAGhClC,EAAY,GACTmC,EAAS,EAAGA,EART,EAQuBA,IAC/B,IAAK,IAAIC,EAAS,EAAGA,EAVb,EAU2BA,IAC/BpC,EAAUf,KAAK,CACXD,IAAKoD,EAAS,EACdrD,IAAKoD,EAAS,IAK1B,MAAO,CACHnD,IAnBQ,EAoBRD,IAnBQ,EAoBRa,QAASA,EACT8B,eAAgBO,MAnBCjD,GAmBmBkD,KAAK,MACzCvB,SAAS,EACTxD,cAAe,CACXC,OAAQ,KACRP,QAAS,IAEb6C,QAAS,EACTI,SAAU,CAAC,SACXE,UAAWA,EACXM,uBAAuB,EACvBxD,QAAS,CACL,EAAK,CACDoB,KAAM,IACNmE,MAAO,CAAC,EAAG,EAAG,IAElB,EAAK,CACDnE,KAAM,IACNmE,MAAO,CAAC,EAAG,EAAG,Q,wCAMZnF,GAEd,IAAM0C,EACNf,KAAKgD,MAAMjC,QAAQ7B,MAAM,EAAIc,KAAKgD,MAAMnC,QAAU,GAC5CgC,EACN9B,EAAQA,EAAQlC,OAAS,GAAGb,QAAQkB,QAGpC,IAAIc,KAAKgD,MAAM1E,cAAcC,SAAUsE,EAAexE,GAAtD,CAIAwE,EAAexE,GAAK2B,KAAKgD,MAAMlB,QAAU,IAAM,IAG/C,IAAMb,EACNjB,KAAKgD,MAAM/B,SAAS/B,MAAM,EAAIc,KAAKgD,MAAMnC,QAAU,GAE7CvC,EACFP,EAAgB8E,EAAgB7C,KAAKgD,MAAM/E,SAC/C+B,KAAKyD,SAAS,CAKV1C,QAASA,EAAQ5B,OACb,CACI,CACInB,QAAS6E,KAIrBA,eAAgBA,EAChBf,SAAU9B,KAAKgD,MAAMlB,QACrBxD,cAAeA,EACfuC,QAASb,KAAKgD,MAAMnC,QAAU,EAC9BI,SAAUA,EAAS9B,OAAO,CAACd,MAE/BqF,QAAQC,IAAI3D,KAAKgD,U,6BAKdnC,GAIH,IAAME,EACNf,KAAKgD,MAAMjC,QAAQ7B,MAAM,EAAG2B,EAAU,GAIhCgC,EACN9B,EAAQA,EAAQlC,OAAS,GAAGb,QAAQkB,QAC9BZ,EACFP,EAAgB8E,EAAgB7C,KAAKgD,MAAM/E,SAC/C+B,KAAKyD,SAAS,CAMVZ,eAAgBA,EAChBf,UAAWjB,EAAU,GACrBvC,cAAeA,EACfuC,QAASA,M,kCAILd,GACRC,KAAKyD,SAAL,eACK1D,GAAOC,KAAKgD,MAAMjD,O,kCAKvBC,KAAKyD,SAASzD,KAAKiD,gB,uCAGNR,EAAGN,GAAa,IACdtC,EAAW4C,EAApBmB,OAAS/D,MACVA,IACDA,EAAQsC,GAEZnC,KAAKyD,SAAS,CACVxF,QAASmE,OAAOyB,OACZ,GACA7D,KAAKgD,MAAM/E,QAFNmE,OAAA,IAAAA,CAAA,GAIAD,EAAaC,OAAOyB,OACjB,GACA7D,KAAKgD,MAAM/E,QAAQkE,GACnB,CACI9C,KAAMQ,U,0CAQT,IAAD,OACViE,EAAe9D,KAAK+D,YAAY/D,KAAKgD,MAAM/E,QAAQ+F,EAAER,OACrDS,EAAejE,KAAK+D,YAAY/D,KAAKgD,MAAM/E,QAAQiG,EAAEV,OAE3DxD,KAAKgD,MAAMH,eAAesB,SAAQ,SAAC1F,EAAQJ,GACvC,IAAM+F,EAAKC,SAASC,eAAT,iBAAkCjG,IACzC,EAAK2E,MAAM1E,cAAcN,QAAQY,SAASP,GAC3B,MAAXI,GACA2F,EAAGG,MAAMC,gBAAkBV,EAC3BM,EAAGG,MAAMf,MAAQ,SACC,MAAX/E,IACP2F,EAAGG,MAAMC,gBAAkBP,EAC3BG,EAAGG,MAAMf,MAAQ,SAGN,MAAX/E,GACA2F,EAAGG,MAAMC,gBAAkB,QAC3BJ,EAAGG,MAAMf,MAAQM,GACC,MAAXrF,GACP2F,EAAGG,MAAMC,gBAAkB,QAC3BJ,EAAGG,MAAMf,MAAQS,IAEjBG,EAAGG,MAAMC,gBAAkB,QAC3BJ,EAAGG,MAAMf,MAAQ,YAK7B,IAAMiB,EAAuBJ,SAASK,uBAAuB,iBAC7DtC,OAAOuC,QAAQF,GAAsBN,SAAQ,YAAgB,IAAD,6BACrDI,MAAMf,MAAQM,KAGrB,IAAMc,EAAuBP,SAASK,uBAAuB,iBAC7DtC,OAAOuC,QAAQC,GAAsBT,SAAQ,YAAgB,IAAD,6BACrDI,MAAMf,MAAQS,KAGrB,IAAMY,EAAgCR,SAASK,uBAAuB,4BACtEtC,OAAOuC,QAAQE,GAA+BV,SAAQ,YAAgB,IAAD,6BAC9DI,MAAMC,gBAAkBV,KAG/B,IAAMgB,EAAgCT,SAASK,uBAAuB,4BACtEtC,OAAOuC,QAAQG,GAA+BX,SAAQ,YAAgB,IAAD,6BAC9DI,MAAMC,gBAAkBP,KAG/B,IAAMc,EAA8BV,SAASK,uBAAuB,yBACpEtC,OAAOuC,QAAQI,GAA6BZ,SAAQ,YAAgB,IAAD,6BAC5DI,MAAMC,gBAAkB,UAG/B,IAAMQ,EAAqBX,SAASK,uBAAuB,eAC3DtC,OAAOuC,QAAQK,GAAoBb,SAAQ,YAAgB,IAAD,6BACnDI,MAAMf,MAAQ,a,kCAIbyB,GACR,MAAM,OAAN,OAAcA,EAAIC,KAAK,MAAvB,O,0CAIAlF,KAAKmD,sB,2CAILnD,KAAKmD,sB,wCAIL,IAAIK,EACJ,EAAG,CACCA,EAAQ,GACR,IAAK,IAAInF,EAAI,EAAGA,EAAI,EAAGA,IACnBmF,EAAMpD,KAAK+E,KAAKC,MAAsB,IAAhBD,KAAKE,WAE/B3B,QAAQC,IAAI3D,KAAKsF,QAAQ9B,UACpBxD,KAAKsF,QAAQ9B,IAEtB,OAAOA,I,kCAGCrB,GACRnC,KAAKyD,SAAS,CACVxF,QAASmE,OAAOyB,OACZ,GACA7D,KAAKgD,MAAM/E,QAFNmE,OAAA,IAAAA,CAAA,GAIAD,EAAaC,OAAOyB,OACjB,GACA7D,KAAKgD,MAAM/E,QAAQkE,GACnB,CACIqB,MAAOxD,KAAKuF,0B,8BAQ5B/B,GACJ,OAAOA,EAAMgC,QAAO,SAAC1G,EAAGC,GAAJ,OAAUD,EAAIC,KAAK,M,+BAGjC,IAAD,OACL,OACI,kBAAC,EAAD,CACIoB,IAAKH,KAAKgD,MAAM7C,IAChBD,IAAKF,KAAKgD,MAAM9C,IAChBa,QAASf,KAAKgD,MAAMjC,QACpBe,QAAS9B,KAAKgD,MAAMlB,QACpBxD,cAAe0B,KAAKgD,MAAM1E,cAC1BuC,QAASb,KAAKgD,MAAMnC,QACpBI,SAAUjB,KAAKgD,MAAM/B,SACrBE,UAAWnB,KAAKgD,MAAM7B,UACtBM,sBAAuBzB,KAAKgD,MAAMvB,sBAClCxD,QAAS+B,KAAKgD,MAAM/E,QACpB2B,kBAAmB,SAACvB,GAAD,OACf,EAAKuB,kBAAkBvB,IAC3BgD,OAAQ,SAACR,GAAD,OAAa,EAAKQ,OAAOR,IACjCa,YAAa,SAAC3B,GAAD,OAAS,EAAK2B,YAAY3B,IACvCiC,UAAW,kBAAM,EAAKA,aACtBU,iBAAkB,SAACD,EAAGN,GAAJ,OACd,EAAKO,iBAAiBD,EAAGN,IAC7BQ,YAAa,SAACR,GAAD,OACT,EAAKQ,YAAYR,U,GAhSTzB,IAAMC,WCDlC8E,IAASC,OACL,kBAAC,EAAD,MACArB,SAASC,eAAe,W","file":"static/js/main.2aad4e5e.chunk.js","sourcesContent":["export function calculateWinner(squares, players) {\r\n    /**\r\n     * Array indexes for posible winner lines.\r\n     */\r\n    let lines = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [3, 6, 9],\r\n        [1, 5, 9],\r\n        [3, 5, 7]\r\n    ];\r\n    /**\r\n     * Correction for zero-based index array.\r\n     */\r\n    lines = lines.map(line => line.map(i => --i));\r\n    /**\r\n     * Algorithm to search for a winner\r\n     * 1. Initialize the winner's result object to the no \r\n     * winner state. If there is not winner or draw yet, \r\n     * the function is going to return this default \r\n     * initialization.\r\n     */\r\n    let winnersResult = {\r\n        winner: null,\r\n        squares: [],\r\n    };\r\n    /**\r\n     * 2. Check if every square got already a mark. if so, \r\n     * set the winner's result object to the draw state.\r\n     */\r\n    if (squares.every((square) => square !== null)) {\r\n        winnersResult = {\r\n            winner: false, \r\n            squares: [],\r\n        };\r\n    } \r\n    /**\r\n     * 3. loop up for a winner. Then if it finds a winner \r\n     * sets the winner's result object with a winner and \r\n     * every square which is on a winner's line or lines.\r\n     */\r\n    const isNotInWinnersResultSquare = (num) => {\r\n        return !winnersResult.squares.includes(num);\r\n    }\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && \r\n            squares[a] === squares[b] && \r\n            squares[b] === squares[c]) {\r\n            const highlightSquares = \r\n            winnersResult.squares.slice().concat(\r\n                [a , b , c].filter(isNotInWinnersResultSquare)\r\n            );\r\n            winnersResult = {\r\n                winner: players[squares[a]].name,\r\n                squares: highlightSquares,\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * 4. Return the winner's result object with the proper \r\n     * value in each case. This algorithm ensures not just to \r\n     * catch the first winner line found, but every \r\n     * simultaneous lines that could yeld the winner.\r\n     */\r\n    return winnersResult;\r\n}","import React from 'react';\r\n\r\nexport const Square = (props) => {\r\n    return (\r\n        <button\r\n            className={props.squareStyle}\r\n            id={props.id}\r\n            onClick={props.handleClickSquare}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { Square } from '../Square/Square';\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                key={i} \r\n                id={`square ${i}`}\r\n                value={this.props.squares[i]}\r\n                squareStyle={\"square\"}\r\n                handleClickSquare={() => \r\n                    this.props.handleClickSquare(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    generateRow(numOfCols, row) {\r\n        let i = row * numOfCols;\r\n        const line = [];\r\n        for (let col = 0; col < numOfCols; col++) {\r\n            line.push(this.renderSquare(i++));\r\n        }\r\n        return line;\r\n    }\r\n\r\n    generateBoard(numOfCols , numOfRows) {\r\n        const board = [];\r\n        for (let row = 0 ; row < numOfRows ; row++) {\r\n            board.push(\r\n                <div \r\n                    key={`row${row}`}\r\n                    className=\"board-row\"\r\n                >\r\n                    {this.generateRow(numOfCols, row)}\r\n                </div>\r\n            );\r\n        }\r\n        return board;\r\n    }    \r\n\r\n    render() {\r\n        return (\r\n            <div>{this.generateBoard(this.props.col , this.props.row)}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nclass MoveHistoryList extends React.Component {\r\n    boldCurrentMove(moveNum) {\r\n        if (this.props.moveNum === moveNum) {\r\n            return \"bold\";\r\n        } else {\r\n            return \"normal\";\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const moves = this.props.history.map((move, moveNum) => {\r\n            // Get last marked position (i)\r\n            const sequence = this.props.sequence.slice();\r\n            const i = sequence[moveNum];\r\n            const text = (!moveNum ? <span>Game Start</span> : \r\n                <span>move #{moveNum} - {\" \"}\r\n                <b className={`player${move.squares[i]}-color`}>\r\n                {move.squares[i]}</b> (\r\n                {this.props.locations[i].col} , \r\n                {this.props.locations[i].row})</span>);\r\n            return (\r\n                <li key={moveNum}\r\n                    className={this.boldCurrentMove(moveNum)}\r\n                >\r\n                    <button \r\n                        className={this.boldCurrentMove(moveNum)}\r\n                        /**\r\n                        Action to take back the game to the \r\n                        specified move \r\n                        */\r\n                        onClick={() => this.props.jumpTo(moveNum)}\r\n                    >\r\n                    {text}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        moves.sort((firstEl, secondEl) => {\r\n            if  (this.props.toggleMoveHistoryList) {\r\n                return secondEl.key - firstEl.key;\r\n            } else {\r\n                return firstEl.key - secondEl.key;\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                { moves.length > 1 ? (\r\n                <button\r\n                    className=\"toggle\" \r\n                    onClick={() => this.props.toggleOrder(\"toggleMoveHistoryList\")}\r\n                >\r\n                    Toggle the List Order\r\n                </button>\r\n                ) : \"\" }\r\n                <p>Move number - Player - <br />\r\n                Location (column, Row)</p>\r\n                <ol reversed={this.props.toggleMoveHistoryList}>\r\n                {moves}\r\n                </ol>\r\n                <p>Press to go back to any <br /> \r\n                move and continue playing</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoveHistoryList;","import React from 'react';\r\n\r\nexport const Status = (props) => {\r\n    let status;\r\n    if (props.winnersResult.winner) {\r\n        status = (<p><b>** Habemus Winner **</b></p>);\r\n    } else if (props.winnersResult.winner === false){\r\n        status = (<p>Draw</p>);\r\n    } else {\r\n        status = (<p>Next player: \r\n        <b className={`player${props.xIsNext ? 'X' : 'O'}-color`}>\r\n        {props.xIsNext ? 'X' : 'O'}</b></p>);\r\n    }\r\n    return (<div className=\"status\">{status}</div>);\r\n}","import React from 'react';\r\n\r\nexport const ResetGame = (props) => {\r\n    return (\r\n        <div className=\"reset-game\">\r\n            <button \r\n                className=\"play-again\"\r\n                onClick={() => props.resetGame()}\r\n            >{props.text}</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\n\r\nexport const GameOver = (props) => {\r\n    let text;\r\n    if (props.winnersResult.winner) {  \r\n        const playerMark = \r\n        getPlayerMarkByName(props.players, props.winnersResult.winner);\r\n        text = (\r\n        <div>\r\n            <h1>*<span className={`player${playerMark}-color`}>\r\n            {props.winnersResult.winner}</span>*</h1>\r\n            <h2>Winner</h2>\r\n        </div>\r\n        );\r\n    } else {\r\n        text = (\r\n            <h1>Draw!</h1>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"game-over\">\r\n            {text}\r\n            <ResetGame\r\n                text=\"Play Again\"\r\n                resetGame={() => props.resetGame()}\r\n            ></ResetGame>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getPlayerMarkByName(object, name) {\r\n    return Object.keys(object).find(key => object[key].name === name);\r\n}","import React from 'react';\r\n\r\nexport const PlayerSettings = (props) => {\r\n    return(\r\n        <div className=\"player-settings\">\r\n            <p \r\n                className=\"player-name-input-title\"\r\n            >Player {props.playerMark}'s Name:</p>\r\n            <input \r\n                className={`player-name-input player${props.playerMark}-color`} \r\n                onChange={(e) => \r\n                    props.changePlayerName(e, \r\n                    props.playerMark)}\r\n            ></input>\r\n            <button \r\n                className={`player-color-button player${props.playerMark}-background-color white-color`}\r\n                onClick={(playerMark) => \r\n                    props.changeColor(props.playerMark)}\r\n            >Pick Color</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n// Components\r\nimport Board from '../Board/Board';\r\nimport MoveHistoryList from '../MoveHistoryList/MoveHistoryList';\r\nimport { Status } from '../Status/Status';\r\nimport { GameOver } from '../GameOver/GameOver';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\nimport { PlayerSettings } from '../PlayerSettings/PlayerSettings';\r\n\r\nexport const GameRendering = (props) => {\r\n    const history = props.history.slice(0, props.moveNum + 1);\r\n    const currentSquares = \r\n    history[history.length - 1].squares.slice();\r\n    const gameOver = (\r\n        <GameOver\r\n            players={props.players}\r\n            winnersResult={props.winnersResult}\r\n            resetGame={() => props.resetGame()}\r\n        ></GameOver>\r\n    );\r\n    const resetGame = (\r\n        <ResetGame\r\n            text=\"Reset Game\" \r\n            resetGame={() => props.resetGame()}\r\n        ></ResetGame>\r\n    );\r\n    \r\n    return (\r\n    <div className=\"game\">\r\n        <div className=\"game-heading\">\r\n            <PlayerSettings\r\n                playerMark={\"X\"}\r\n                players={props.players}\r\n                changePlayerName={(e, playerMark) => {\r\n                    return props.changePlayerName(e, playerMark);\r\n                }}\r\n                changeColor={(playerMark) => \r\n                    props.changeColor(playerMark)}\r\n            ></PlayerSettings>\r\n            <PlayerSettings\r\n                playerMark={\"O\"}\r\n                players={props.players}\r\n                changePlayerName={(e, playerMark) => {\r\n                    return props.changePlayerName(e, playerMark);\r\n                }}\r\n                changeColor={(playerMark) => \r\n                    props.changeColor(playerMark)}\r\n            ></PlayerSettings>\r\n        </div>\r\n        <div className=\"game-body\">\r\n            <div className=\"game-board\">\r\n                <Board \r\n                    col={props.col} \r\n                    row={props.row} \r\n                    squares={currentSquares}\r\n                    xIsNext={props.xIsNext} \r\n                    winnersResult={props.winnersResult} \r\n                    handleClickSquare={(i) => {\r\n                        return props.handleClickSquare(i);\r\n                    }}\r\n                />\r\n                {(props.winnersResult.winner || props.winnersResult.winner === false) ?\r\n                    gameOver : resetGame} \r\n            </div>\r\n            <div className=\"game-info\">\r\n                <Status\r\n                    xIsNext={props.xIsNext} \r\n                    winnersResult={props.winnersResult}\r\n                ></Status>\r\n                <MoveHistoryList\r\n                    history={props.history}\r\n                    sequence={props.sequence}\r\n                    moveNum={props.moveNum}\r\n                    locations={props.locations}\r\n                    toggleMoveHistoryList=\r\n                        {props.toggleMoveHistoryList}\r\n                    jumpTo={(moveNum) => props.jumpTo(moveNum)}\r\n                    toggleOrder={(key) => props.toggleOrder(key)}\r\n                ></MoveHistoryList>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\n// Helper Functions\r\nimport { calculateWinner } from '../../util/helpers';\r\n// Pesentational Component\r\nimport { GameRendering } from './GameRendering';\r\n\r\nclass GameContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.initialize();\r\n\r\n        this.handleClickSquare = this.handleClickSquare.bind(this);\r\n        this.jumpTo = this.jumpTo.bind(this);\r\n        this.toggleOrder = this.toggleOrder.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n        this.changePlayerName = this.changePlayerName.bind(this);\r\n        this.applyPlayersColor = this.applyPlayersColor.bind(this);\r\n    }\r\n\r\n    initialize() {\r\n        const col = 3;\r\n        const row = 3;\r\n\r\n        const qtyOfSquares = col * row;\r\n        const history = [{\r\n            squares: Array(qtyOfSquares).fill(null),\r\n        }];\r\n        \r\n        const locations = [];\r\n        for (let rowNum = 0; rowNum < row; rowNum++) {\r\n            for (let colNum = 0; colNum < col; colNum ++) {\r\n                locations.push({\r\n                    col: colNum + 1,\r\n                    row: rowNum + 1,\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            col: col,\r\n            row: row,\r\n            history: history,\r\n            currentSquares: Array(qtyOfSquares).fill(null), \r\n            xIsNext: true,\r\n            winnersResult: {\r\n                winner: null,\r\n                squares: []\r\n            },\r\n            moveNum: 0, \r\n            sequence: [\"start\"],\r\n            locations: locations,\r\n            toggleMoveHistoryList: false,\r\n            players: {\r\n                \"X\": {\r\n                    name: \"X\", \r\n                    color: [0, 0, 0], \r\n                }, \r\n                \"O\": {\r\n                    name: \"O\", \r\n                    color: [0, 0, 0], \r\n                },\r\n            }, \r\n        };\r\n    };\r\n\r\n    handleClickSquare(i) {\r\n        // Make an immutable copy of the last set of games's moves\r\n        const history = \r\n        this.state.history.slice(0 , this.state.moveNum + 1);\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        // Disable the move if there is a winner \r\n        // or if the square's been marked\r\n        if (this.state.winnersResult.winner || currentSquares[i]) {\r\n            return;\r\n        }\r\n        //Assign the porper value for the clicked square\r\n        currentSquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        // Make an immutable copy of the sequence of \r\n        // the marked positions\r\n        const sequence = \r\n        this.state.sequence.slice(0 , this.state.moveNum + 1);\r\n        //Determine if there is a winner due the last move \r\n        const winnersResult = \r\n            calculateWinner(currentSquares, this.state.players);\r\n        this.setState({\r\n            // Add the last set of game's moves to the array \r\n            // which track game's moves (unlike push() method, \r\n            // concat() method doesn't muatate the \r\n            // original array)\r\n            history: history.concat(\r\n                [\r\n                    {\r\n                        squares: currentSquares,\r\n                    }\r\n                ]\r\n            ),\r\n            currentSquares: currentSquares, \r\n            xIsNext: !this.state.xIsNext,\r\n            winnersResult: winnersResult, \r\n            moveNum: this.state.moveNum + 1, \r\n            sequence: sequence.concat([i]),\r\n        });\r\n        console.log(this.state);\r\n    }\r\n    /**\r\n     * Show the move of the indicated moveNum\r\n     */\r\n    jumpTo(moveNum) {\r\n        /**\r\n         * History of the indicated moveNum\r\n         */\r\n        const history = \r\n        this.state.history.slice(0, moveNum + 1);\r\n        /**\r\n         * Squares' state of the picked moveNum\r\n         */\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        const winnersResult = \r\n            calculateWinner(currentSquares, this.state.players);\r\n        this.setState({\r\n            // !(moveNum % 2) this is: because X starts \r\n            // first (moveNum 0) it is even, then module of \r\n            // a even number is 0, evaluated as false which \r\n            // is turned to the opposite by \r\n            // the Logical NOT operator (!) \r\n            currentSquares: currentSquares,\r\n            xIsNext: !(moveNum % 2), \r\n            winnersResult: winnersResult, \r\n            moveNum: moveNum, \r\n        });\r\n    }\r\n\r\n    toggleOrder(key) {\r\n        this.setState({\r\n            [key]: !this.state[key]\r\n        });\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState(this.initialize());\r\n    }\r\n\r\n    changePlayerName(e, playerMark) {\r\n        let { target: {value} } = e;\r\n        if (!value) {\r\n            value = playerMark;\r\n        }\r\n        this.setState({\r\n            players: Object.assign(\r\n                {},\r\n                this.state.players,\r\n                { \r\n                    [playerMark]: Object.assign(\r\n                        {},\r\n                        this.state.players[playerMark],\r\n                        {\r\n                            name: value,\r\n                        }\r\n                    )\r\n                }\r\n            )\r\n        });\r\n    }\r\n\r\n    applyPlayersColor() {\r\n        const playerXColor = this.formatColor(this.state.players.X.color);\r\n        const playerOColor = this.formatColor(this.state.players.O.color);\r\n\r\n        this.state.currentSquares.forEach((square, i) => {\r\n            const el = document.getElementById(`square ${i}`);\r\n            if (this.state.winnersResult.squares.includes(i)) {\r\n                if (square === 'X') {\r\n                    el.style.backgroundColor = playerXColor;\r\n                    el.style.color = \"white\";\r\n                } else if (square === \"O\") {\r\n                    el.style.backgroundColor = playerOColor;\r\n                    el.style.color = \"white\";\r\n                }\r\n            } else {\r\n                if (square === 'X') {\r\n                    el.style.backgroundColor = \"white\";\r\n                    el.style.color = playerXColor;\r\n                } else if (square === \"O\") {\r\n                    el.style.backgroundColor = \"white\";\r\n                    el.style.color = playerOColor;\r\n                } else {\r\n                    el.style.backgroundColor = \"white\";\r\n                    el.style.color = \"black\";\r\n                } \r\n            }\r\n        });\r\n\r\n        const playerXElementsColor = document.getElementsByClassName(\"playerX-color\");\r\n        Object.entries(playerXElementsColor).forEach(([key, el]) => {\r\n            el.style.color = playerXColor;\r\n        });\r\n\r\n        const playerOElementsColor = document.getElementsByClassName(\"playerO-color\");\r\n        Object.entries(playerOElementsColor).forEach(([key, el]) => {\r\n            el.style.color = playerOColor;\r\n        });\r\n\r\n        const playerXElementsBacgroundColor = document.getElementsByClassName(\"playerX-background-color\");\r\n        Object.entries(playerXElementsBacgroundColor).forEach(([key, el]) => {\r\n            el.style.backgroundColor = playerXColor;\r\n        });\r\n\r\n        const playerOElementsBacgroundColor = document.getElementsByClassName(\"playerO-background-color\");\r\n        Object.entries(playerOElementsBacgroundColor).forEach(([key, el]) => {\r\n            el.style.backgroundColor = playerOColor;\r\n        });\r\n\r\n        const noneBackgroundColorElements = document.getElementsByClassName(\"none-background-color\");\r\n        Object.entries(noneBackgroundColorElements).forEach(([key, el]) => {\r\n            el.style.backgroundColor = \"none\";\r\n        });\r\n\r\n        const whiteColorElements = document.getElementsByClassName(\"white-color\");\r\n        Object.entries(whiteColorElements).forEach(([key, el]) => {\r\n            el.style.color = \"white\";\r\n        });\r\n    }\r\n\r\n    formatColor(arr) {\r\n        return `rgb(${arr.join(', ')})`;            \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.applyPlayersColor();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.applyPlayersColor();\r\n    }\r\n\r\n    chooseDarkColor() {\r\n        let color;\r\n        do {\r\n            color = [];\r\n            for (let i = 0; i < 3; i++) {\r\n                color.push(Math.floor(Math.random() * 256));\r\n            }\r\n            console.log(this.islight(color));\r\n        } while (this.islight(color));\r\n\r\n        return color;\r\n    }\r\n\r\n    changeColor(playerMark) {\r\n        this.setState({\r\n            players: Object.assign(\r\n                {},\r\n                this.state.players,\r\n                {\r\n                    [playerMark]: Object.assign(\r\n                        {},\r\n                        this.state.players[playerMark], \r\n                        {\r\n                            color: this.chooseDarkColor()\r\n                        }\r\n                    )\r\n                }\r\n            )\r\n        });\r\n    }\r\n\r\n    islight(color) {\r\n        return color.reduce((a, b) => a + b) > 127 * 3;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <GameRendering \r\n                col={this.state.col} \r\n                row={this.state.row} \r\n                history={this.state.history}\r\n                xIsNext={this.state.xIsNext} \r\n                winnersResult={this.state.winnersResult}\r\n                moveNum={this.state.moveNum}\r\n                sequence={this.state.sequence} \r\n                locations={this.state.locations} \r\n                toggleMoveHistoryList={this.state.toggleMoveHistoryList}\r\n                players={this.state.players}\r\n                handleClickSquare={(i) => \r\n                    this.handleClickSquare(i)}\r\n                jumpTo={(moveNum) => this.jumpTo(moveNum)}\r\n                toggleOrder={(key) => this.toggleOrder(key)}\r\n                resetGame={() => this.resetGame()}\r\n                changePlayerName={(e, playerMark) => \r\n                    this.changePlayerName(e, playerMark)}\r\n                changeColor={(playerMark) => \r\n                    this.changeColor(playerMark)}\r\n            ></GameRendering>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GameContainer from './Components/Game/GameContainer';\r\n\r\nReactDOM.render(\r\n    <GameContainer />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}