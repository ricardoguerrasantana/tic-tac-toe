{"version":3,"sources":["util/helpers.js","Components/Square/Square.js","Components/Board/Board.js","Components/MoveHistoryList/MoveHistoryList.js","Components/Status/Status.js","Components/ResetGame/ResetGame.js","Components/GameOver/GameOver.js","Components/PlayerName/PlayerName.js","Components/Game/GameRendering.js","Components/Game/GameContainer.js","index.js"],"names":["calculateWinner","squares","playersName","lines","map","line","i","winnersResult","winner","every","square","isNotInWinnersResultSquare","num","includes","length","a","b","c","highlightSquares","slice","concat","filter","Square","props","className","squareStyle","onClick","handleClickSquare","value","Board","this","key","numOfCols","row","col","push","renderSquare","numOfRows","board","generateRow","generateBoard","React","Component","MoveHistoryList","moveNum","moves","history","move","sequence","text","locations","boldCurrentMove","jumpTo","sort","firstEl","secondEl","toggleMoveHistoryList","toggleOrder","reversed","Status","status","xIsNext","ResetGame","resetGame","GameOver","DisplayDraw","DisplayWinner","PlayerName","playerMark","onChange","e","changePlayerName","GameRendering","currentSquares","gameOver","player","GameContainer","state","initialize","bind","Array","fill","setState","target","Object","assign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7dcb906.chunk.js","sourcesContent":["export function calculateWinner(squares, playersName) {\r\n    /**\r\n     * Array indexes for posible winner lines.\r\n     */\r\n    let lines = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [3, 6, 9],\r\n        [1, 5, 9],\r\n        [3, 5, 7]\r\n    ];\r\n    /**\r\n     * Correction for zero-based index array.\r\n     */\r\n    lines = lines.map(line => line.map(i => --i));\r\n    /**\r\n     * Algorithm to search for a winner\r\n     * 1. Initialize the winner's result object to the no \r\n     * winner state. If there is not winner or draw yet, \r\n     * the function is going to return this default \r\n     * initialization.\r\n     */\r\n    let winnersResult = {\r\n        winner: null,\r\n        squares: [],\r\n    };\r\n    /**\r\n     * 2. Check if every square got already a mark. if so, \r\n     * set the winner's result object to the draw state.\r\n     */\r\n    if (squares.every((square) => square !== null)) {\r\n        winnersResult = {\r\n            winner: false, \r\n            squares: [],\r\n        };\r\n    } \r\n    /**\r\n     * 3. loop up for a winner. Then if it finds a winner \r\n     * sets the winner's result object with a winner and \r\n     * every square which is on a winner's line or lines.\r\n     */\r\n    const isNotInWinnersResultSquare = (num) => {\r\n        return !winnersResult.squares.includes(num);\r\n    }\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && \r\n            squares[a] === squares[b] && \r\n            squares[b] === squares[c]) {\r\n            const highlightSquares = \r\n            winnersResult.squares.slice().concat(\r\n                [a , b , c].filter(isNotInWinnersResultSquare)\r\n            );\r\n            winnersResult = {\r\n                winner: playersName[squares[a]],\r\n                squares: highlightSquares,\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * 4. Return the winner's result object with the proper \r\n     * value in each case. This algorithm ensures not just to \r\n     * catch the first winner line found, but every \r\n     * simultaneous lines that could yeld the winner.\r\n     */\r\n    return winnersResult;\r\n}","import React from 'react';\r\n\r\nexport const Square = (props) => {\r\n    return (\r\n        <button\r\n            className={props.squareStyle}\r\n            onClick={props.handleClickSquare}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { Square } from '../Square/Square';\r\n\r\nclass Board extends React.Component {\r\n    highlightSquares(i) {\r\n        if (this.props.winnersResult.squares.includes(i)) {\r\n            return \"highlighting-square square\";\r\n        } else {\r\n            return \"square\";\r\n        }\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                key={i} \r\n                value={this.props.squares[i]}\r\n                squareStyle=\r\n                    {this.highlightSquares(i)}\r\n                handleClickSquare={() => \r\n                    this.props.handleClickSquare(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    generateRow(numOfCols, row) {\r\n        let i = row * numOfCols;\r\n        const line = [];\r\n        for (let col = 0; col < numOfCols; col++) {\r\n            line.push(this.renderSquare(i++));\r\n        }\r\n        return line;\r\n    }\r\n\r\n    generateBoard(numOfCols , numOfRows) {\r\n        const board = [];\r\n        for (let row = 0 ; row < numOfRows ; row++) {\r\n            board.push(\r\n                <div \r\n                    key={`row${row}`}\r\n                    className=\"board-row\"\r\n                >\r\n                    {this.generateRow(numOfCols, row)}\r\n                </div>\r\n            );\r\n        }\r\n        return board;\r\n    }    \r\n\r\n    render() {\r\n        return (\r\n            <div>{this.generateBoard(3 , 3)}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nclass MoveHistoryList extends React.Component {\r\n    boldCurrentMove(moveNum) {\r\n        if (this.props.moveNum === moveNum) {\r\n            return \"bold\";\r\n        } else {\r\n            return \"normal\";\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const moves = this.props.history.map((move, moveNum) => {\r\n            // Get last marked position (i)\r\n            const sequence = this.props.sequence.slice();\r\n            const i = sequence[moveNum];\r\n            const text = (!moveNum ? <span>Game Start</span> : \r\n                <span>move #{moveNum} - <b>{move.squares[i]}</b> (\r\n                {this.props.locations[i].col} , \r\n                {this.props.locations[i].row})</span>);\r\n            return (\r\n                <li key={moveNum}\r\n                    className={this.boldCurrentMove(moveNum)}\r\n                >\r\n                    <button \r\n                        className={this.boldCurrentMove(moveNum)}\r\n                        /**\r\n                        Action to take back the game to the \r\n                        specified move \r\n                        */\r\n                        onClick={() => this.props.jumpTo(moveNum)}\r\n                    >\r\n                    {text}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        moves.sort((firstEl, secondEl) => {\r\n            if  (this.props.toggleMoveHistoryList) {\r\n                return secondEl.key - firstEl.key;\r\n            } else {\r\n                return firstEl.key - secondEl.key;\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                { moves.length > 1 ? (\r\n                <button\r\n                    className=\"toggle\" \r\n                    onClick={() => this.props.toggleOrder()}\r\n                >\r\n                    Toggle the List Order\r\n                </button>\r\n                ) : \"\" }\r\n                <p>Move number - Player - <br />\r\n                Location (column, Row)</p>\r\n                <ol reversed={this.props.toggleMoveHistoryList}>\r\n                {moves}\r\n                </ol>\r\n                <p>Press to go back to any <br /> \r\n                move and continue playing</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoveHistoryList;","import React from 'react';\r\n\r\nexport const Status = (props) => {\r\n    let status;\r\n    if (props.winnersResult.winner) {\r\n        status = `** Habemus Winner **`;\r\n    } else if (props.winnersResult.winner === false){\r\n        status = `Draw`;\r\n    } else {\r\n        status = `Next player: \r\n        ${props.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n    return (<div className=\"status\">{status}</div>);\r\n}","import React from 'react';\r\n\r\nexport const ResetGame = (props) => {\r\n    return (\r\n        <div className=\"reset-game\">\r\n            <button \r\n                className=\"play-again\"\r\n                onClick={() => props.resetGame()}\r\n            >{props.text}</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\n\r\nexport const GameOver = (props) => {\r\n    const text = props.winnersResult.winner ? \r\n        <DisplayWinner winnersResult={props.winnersResult}/> : \r\n        <DisplayDraw/>;\r\n    return (\r\n        <div className=\"game-over\">\r\n            {text}\r\n            <ResetGame\r\n                text=\"Play Again\"\r\n                resetGame={() => props.resetGame()}\r\n            ></ResetGame>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DisplayDraw = () => {\r\n    return (<h1>Draw!</h1>);\r\n}\r\n\r\nconst DisplayWinner = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>*{props.winnersResult.winner}*</h1>\r\n            <h2>Winner</h2>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport const PlayerName = (props) => {\r\n    return(\r\n        <div className=\"player-name\">\r\n            <p \r\n                className=\"name-input\"\r\n            >Player {props.playerMark}'s Name: </p>\r\n            <input \r\n                className=\"name-input\"\r\n                onChange={(e) => \r\n                    props.changePlayerName(e, \r\n                    props.playerMark)}\r\n            ></input>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n// Components\r\nimport Board from '../Board/Board';\r\nimport MoveHistoryList from '../MoveHistoryList/MoveHistoryList';\r\nimport { Status } from '../Status/Status';\r\nimport { GameOver } from '../GameOver/GameOver';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\nimport { PlayerName } from '../PlayerName/PlayerName';\r\n\r\nexport const GameRendering = (props) => {\r\n    const history = props.history.slice(0, props.moveNum + 1);\r\n    const currentSquares = \r\n    history[history.length - 1].squares.slice();\r\n    const gameOver = (\r\n        <GameOver\r\n            winnersResult={props.winnersResult}\r\n            resetGame={() => props.resetGame()}\r\n        ></GameOver>\r\n    );\r\n    const resetGame = (\r\n        <ResetGame\r\n            text=\"Reset Game\" \r\n            resetGame={() => props.resetGame()}\r\n        ></ResetGame>\r\n    );\r\n    \r\n    return (\r\n        <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                        squares={currentSquares}\r\n                        xIsNext={props.xIsNext} \r\n                        winnersResult={props.winnersResult} \r\n                        handleClickSquare={(i) => {\r\n                            return props.handleClickSquare(i);\r\n                        }}\r\n                    />\r\n                    {(props.winnersResult.winner || props.winnersResult.winner === false) ?\r\n                     gameOver : resetGame} \r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <PlayerName\r\n                        playerMark={\"X\"}\r\n                        player={props.player}\r\n                        changePlayerName={(e, playerMark) => {\r\n                            return props.changePlayerName(e, playerMark);\r\n                        }}\r\n                    ></PlayerName>\r\n                    <PlayerName\r\n                        playerMark={\"O\"}\r\n                        player={props.player}\r\n                        changePlayerName={(e, playerMark) => {\r\n                            return props.changePlayerName(e, playerMark);\r\n                        }}\r\n                    ></PlayerName>\r\n                    <Status\r\n                        xIsNext={props.xIsNext} \r\n                        winnersResult={props.winnersResult}\r\n                    ></Status>\r\n                    <MoveHistoryList\r\n                        history={props.history}\r\n                        sequence={props.sequence}\r\n                        moveNum={props.moveNum}\r\n                        locations={props.locations}\r\n                        toggleMoveHistoryList={props.toggleMoveHistoryList}\r\n                        jumpTo={(moveNum) => props.jumpTo(moveNum)}\r\n                        toggleOrder={() => props.toggleOrder()}\r\n                    ></MoveHistoryList>\r\n                </div>\r\n            </div>\r\n    );\r\n}","import React from 'react';\r\n// Helper Functions\r\nimport { calculateWinner } from '../../util/helpers';\r\n// Pesentational Component\r\nimport { GameRendering } from './GameRendering';\r\n\r\nclass GameContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.initialize();\r\n\r\n        this.handleClickSquare = this.handleClickSquare.bind(this);\r\n        this.jumpTo = this.jumpTo.bind(this);\r\n        this.toggleOrder = this.toggleOrder.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n        this.changePlayerName = this.changePlayerName.bind(this);\r\n    }\r\n\r\n    initialize() {\r\n        return {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                }\r\n            ],\r\n            xIsNext: true,\r\n            winnersResult: {\r\n                winner: null,\r\n                squares: []\r\n            },\r\n            moveNum: 0, \r\n            sequence: [\"start\"],\r\n            locations: [\r\n                {col: 1, row: 1},\r\n                {col: 2, row: 1},\r\n                {col: 3, row: 1},\r\n                {col: 1, row: 2},\r\n                {col: 2, row: 2},\r\n                {col: 3, row: 2},\r\n                {col: 1, row: 3},\r\n                {col: 2, row: 3},\r\n                {col: 3, row: 3},\r\n            ],\r\n            toggleMoveHistoryList: false,\r\n            player: {\r\n                \"X\": \"X\", \r\n                \"O\": \"O\",\r\n            },\r\n        }\r\n    };\r\n\r\n    handleClickSquare(i) {\r\n        // Make an immutable copy of the last set of games's moves\r\n        const history = \r\n        this.state.history.slice(0 , this.state.moveNum + 1);\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        // Disable the move if there is a winner \r\n        // or if the square's been marked\r\n        if (this.state.winnersResult.winner || currentSquares[i]) {\r\n            return;\r\n        }\r\n        //Assign the porper value for the clicked square\r\n        currentSquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        // Make an immutable copy of the sequence of \r\n        // the marked positions\r\n        const sequence = \r\n        this.state.sequence.slice(0 , this.state.moveNum + 1);\r\n        //Determine if there is a winner due the last move \r\n        const winnersResult = \r\n            calculateWinner(currentSquares, this.state.player);\r\n        this.setState({\r\n            // Add the last set of game's moves to the array \r\n            // which track game's moves (unlike push() method, \r\n            // concat() method doesn't muatate the \r\n            // original array)\r\n            history: history.concat(\r\n                [\r\n                    {\r\n                        squares: currentSquares,\r\n                    }\r\n                ]\r\n            ),\r\n            xIsNext: !this.state.xIsNext,\r\n            winnersResult: winnersResult, \r\n            moveNum: this.state.moveNum + 1, \r\n            sequence: sequence.concat([i]),\r\n        });\r\n    }\r\n    /**\r\n     * Show the move of the indicated moveNum\r\n     */\r\n    jumpTo(moveNum) {\r\n        /**\r\n         * History of the indicated moveNum\r\n         */\r\n        const history = \r\n        this.state.history.slice(0, moveNum + 1);\r\n        /**\r\n         * Squares' state of the picked moveNum\r\n         */\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        const winnersResult = \r\n            calculateWinner(currentSquares, this.state.player);\r\n        this.setState({\r\n            // !(moveNum % 2) this is: because X starts \r\n            // first (moveNum 0) it is even, then module of \r\n            // a even number is 0, evaluated as false which \r\n            // is turned to the opposite by \r\n            // the Logical NOT operator (!) \r\n            xIsNext: !(moveNum % 2), \r\n            winnersResult: winnersResult, \r\n            moveNum: moveNum, \r\n        });\r\n    }\r\n\r\n    toggleOrder() {\r\n        this.setState({\r\n            toggleMoveHistoryList: !this.state.toggleMoveHistoryList\r\n        });\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState(this.initialize());\r\n    }\r\n\r\n    changePlayerName(e, playerMark) {\r\n        let { target: {value} } = e;\r\n        if (!value) {\r\n            value = playerMark;\r\n        }\r\n        this.setState({\r\n            player: Object.assign(\r\n                {},\r\n                this.state.player,\r\n                { [playerMark]: value }\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <GameRendering \r\n                history={this.state.history}\r\n                xIsNext={this.state.xIsNext} \r\n                winnersResult={this.state.winnersResult}\r\n                moveNum={this.state.moveNum}\r\n                sequence={this.state.sequence} \r\n                locations={this.state.locations} \r\n                toggleMoveHistoryList={this.state.toggleMoveHistoryList}\r\n                player={this.state.player}\r\n                handleClickSquare={(i) => \r\n                    this.handleClickSquare(i)}\r\n                jumpTo={(moveNum) => this.jumpTo(moveNum)}\r\n                toggleOrder={() => this.toggleOrder()}\r\n                resetGame={() => this.resetGame()}\r\n                changePlayerName={(e, playerMark) => \r\n                    this.changePlayerName(e, playerMark)}\r\n            ></GameRendering>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GameContainer from './Components/Game/GameContainer';\r\n\r\nReactDOM.render(\r\n    <GameContainer />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}