{"version":3,"sources":["util/helpers.js","Components/Square/Square.js","Components/Board/Board.js","Components/Status/Status.js","Components/MoveHistoryList/MoveHistoryList.js","Components/ResetGame/ResetGame.js","Components/GameOver/GameOver.js","Components/PlayerName/PlayerName.js","Components/Game/GameRendering.js","Components/Game/GameContainer.js","index.js"],"names":["calculateWinner","squares","playersName","lines","map","line","i","winnersResult","winner","every","square","isNotInWinnersResultSquare","num","includes","length","a","b","c","highlightSquares","slice","concat","filter","highlightWinnerSquares","squaresStyle","defaultStyle","highlightStyle","style","index","Square","props","className","squareStyle","onClick","handleClickSquare","value","Board","key","this","numOfCols","row","col","push","renderSquare","numOfRows","board","generateRow","generateBoard","React","Component","Status","status","xIsNext","MoveHistoryList","moves","history","move","moveNum","sequence","text","locations","moveStyle","jumpTo","toggleOrder","ascendingOrder","reverse","ResetGame","resetGame","GameOver","DisplayDraw","DisplayWinner","PlayerName","playerMark","onChange","e","changePlayerName","GameRendering","currentSquares","gameOver","player","GameContainer","state","initialize","bind","Array","fill","setState","target","Object","assign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3538a366.chunk.js","sourcesContent":["export function calculateWinner(squares, playersName) {\r\n    /**\r\n     * Array indexes for posible winner lines.\r\n     */\r\n    let lines = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [3, 6, 9],\r\n        [1, 5, 9],\r\n        [3, 5, 7]\r\n    ];\r\n    /**\r\n     * Correction for zero-based index array.\r\n     */\r\n    lines = lines.map(line => line.map(i => --i));\r\n    /**\r\n     * Algorithm to search for a winner\r\n     * 1. Initialize the winner's result object to the no \r\n     * winner state. If there is not winner or draw yet, \r\n     * the function is going to return this default \r\n     * initialization.\r\n     */\r\n    let winnersResult = {\r\n        winner: null,\r\n        squares: [],\r\n    };\r\n    /**\r\n     * 2. Check if every square got already a mark. if so, \r\n     * set the winner's result object to the draw state.\r\n     */\r\n    if (squares.every((square) => square !== null)) {\r\n        winnersResult = {\r\n            winner: false, \r\n            squares: [],\r\n        };\r\n    } \r\n    /**\r\n     * 3. loop up for a winner. Then if it finds a winner \r\n     * sets the winner's result object with a winner and \r\n     * every square which is on a winner's line or lines.\r\n     */\r\n    const isNotInWinnersResultSquare = (num) => {\r\n        return !winnersResult.squares.includes(num);\r\n    }\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && \r\n            squares[a] === squares[b] && \r\n            squares[b] === squares[c]) {\r\n            const highlightSquares = \r\n            winnersResult.squares.slice().concat(\r\n                [a , b , c].filter(isNotInWinnersResultSquare)\r\n            );\r\n            winnersResult = {\r\n                winner: playersName[squares[a]],\r\n                squares: highlightSquares,\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * 4. Return the winner's result object with the proper \r\n     * value in each case. This algorithm ensures not just to \r\n     * catch the first winner line found, but every \r\n     * simultaneous lines that could yeld the winner.\r\n     */\r\n    return winnersResult;\r\n}\r\n\r\nexport function highlightWinnerSquares(squaresStyle, highlightSquares, defaultStyle, highlightStyle) {\r\n    /**\r\n     * Store highlighting style in the styles array for every \r\n     * winner square and normal styles for the others.\r\n     */\r\n    const newSquaresStyle = squaresStyle.map((style, index) => {\r\n        if (highlightSquares.includes(index)) {\r\n            return `${defaultStyle} ${highlightStyle}`;\r\n        }\r\n        return `${defaultStyle}`;\r\n    });\r\n    \r\n    return newSquaresStyle;\r\n}","import React from 'react';\r\n\r\nexport const Square = (props) => {\r\n    return (\r\n        <button\r\n            className={props.squareStyle}\r\n            onClick={props.handleClickSquare}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { Square } from '../Square/Square';\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                key={i} \r\n                value={this.props.squares[i]}\r\n                squareStyle={this.props.squaresStyle[i]}\r\n                handleClickSquare={() => \r\n                    this.props.handleClickSquare(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    generateRow(numOfCols, row) {\r\n        let i = row * numOfCols;\r\n        const line = [];\r\n        for (let col = 0; col < numOfCols; col++) {\r\n            line.push(this.renderSquare(i++));\r\n        }\r\n        return line;\r\n    }\r\n\r\n    generateBoard(numOfCols , numOfRows) {\r\n        const board = [];\r\n        for (let row = 0 ; row < numOfRows ; row++) {\r\n            board.push(\r\n                <div \r\n                    key={`row${row}`}\r\n                    className=\"board-row\"\r\n                >\r\n                    {this.generateRow(numOfCols, row)}\r\n                </div>\r\n            );\r\n        }\r\n        return board;\r\n    }    \r\n\r\n    render() {\r\n        return (\r\n            <div>{this.generateBoard(3 , 3)}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nexport const Status = (props) => {\r\n    let status;\r\n    if (props.winner) {\r\n        status = `** Habemus Winner **`;\r\n    } else if (props.winner === false){\r\n        status = `Draw`;\r\n    } else {\r\n        status = `Next player: \r\n        ${props.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n    return (<div className=\"status\">{status}</div>);\r\n}","import React from 'react';\r\n\r\nexport const MoveHistoryList = (props) => {\r\n    const moves = props.history.map((move, moveNum) => {\r\n        // Get last marked position (i)\r\n        const sequence = props.sequence.slice();\r\n        const i = sequence[moveNum];\r\n        const text = (!moveNum ? <span>Game Start</span> : \r\n            <span>move #{moveNum} - <b>{move.squares[i]}</b> (\r\n            {props.locations[i].col} , \r\n            {props.locations[i].row})</span>);\r\n        return (\r\n            <li key={moveNum}\r\n                className={props.moveStyle[moveNum]}\r\n            >\r\n                <button \r\n                    className={props.moveStyle[moveNum]}\r\n                    /**\r\n                    Action to take back the game to the \r\n                    specified move \r\n                    */\r\n                    onClick={() => props.jumpTo(moveNum)}\r\n                >\r\n                {text}\r\n                </button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className=\"toggle\" \r\n                onClick={() => props.toggleOrder()}\r\n            >\r\n                Toggle the List Order\r\n            </button>\r\n            <p>Move number - Player - <br />\r\n            Location (column, Row)</p>\r\n            <ol>\r\n            {props.ascendingOrder ? \r\n            moves : moves.slice().reverse()}\r\n            </ol>\r\n            <p>Press to go back to any <br /> \r\n            move and continue playing</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport const ResetGame = (props) => {\r\n    return (\r\n        <div className=\"reset-game\">\r\n            <button \r\n                className=\"play-again\"\r\n                onClick={() => props.resetGame()}\r\n            >{props.text}</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\n\r\nexport const GameOver = (props) => {\r\n    const text = props.winner ? \r\n        <DisplayWinner winner={props.winner}/> : \r\n        <DisplayDraw/>;\r\n    return (\r\n        <div className=\"game-over\">\r\n            {text}\r\n            <ResetGame\r\n                text=\"Play Again\"\r\n                resetGame={() => props.resetGame()}\r\n            ></ResetGame>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DisplayDraw = () => {\r\n    return (<h1>Draw!</h1>);\r\n}\r\n\r\nconst DisplayWinner = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>*{props.winner}*</h1>\r\n            <h2>Winner</h2>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport const PlayerName = (props) => {\r\n    return(\r\n        <div className=\"player-name\">\r\n            <p \r\n                className=\"name-input\"\r\n            >Player {props.playerMark}'s Name: </p>\r\n            <input \r\n                className=\"name-input\"\r\n                onChange={(e) => \r\n                    props.changePlayerName(e, \r\n                    props.playerMark)}\r\n            ></input>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n// Components\r\nimport Board from '../Board/Board';\r\nimport { Status } from '../Status/Status';\r\nimport { MoveHistoryList } from '../MoveHistoryList/MoveHistoryList';\r\nimport { GameOver } from '../GameOver/GameOver';\r\nimport { ResetGame } from '../ResetGame/ResetGame';\r\nimport { PlayerName } from '../PlayerName/PlayerName';\r\n\r\nexport const GameRendering = (props) => {\r\n    const history = props.history.slice(0, props.moveNum + 1);\r\n    const currentSquares = \r\n    history[history.length - 1].squares.slice();\r\n    const gameOver = (\r\n        <GameOver\r\n            winner={props.winner}\r\n            resetGame={() => props.resetGame()}\r\n        ></GameOver>\r\n    );\r\n    const resetGame = (\r\n        <ResetGame\r\n            text=\"Reset Game\" \r\n            resetGame={() => props.resetGame()}\r\n        ></ResetGame>\r\n    );\r\n    \r\n    return (\r\n        <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                        squares={currentSquares}\r\n                        xIsNext={props.xIsNext} \r\n                        winner={props.winner} \r\n                        squaresStyle={props.squaresStyle} \r\n                        handleClickSquare={(i) => {\r\n                            return props.handleClickSquare(i);\r\n                        }}\r\n                    />\r\n                    {(props.winner || props.winner === false) ?\r\n                     gameOver : resetGame} \r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <PlayerName\r\n                        playerMark={\"X\"}\r\n                        player={props.player}\r\n                        changePlayerName={(e, playerMark) => {\r\n                            return props.changePlayerName(e, playerMark);\r\n                        }}\r\n                    ></PlayerName>\r\n                    <PlayerName\r\n                        playerMark={\"O\"}\r\n                        player={props.player}\r\n                        changePlayerName={(e, playerMark) => {\r\n                            return props.changePlayerName(e, playerMark);\r\n                        }}\r\n                    ></PlayerName>\r\n                    <Status\r\n                        xIsNext={props.xIsNext} \r\n                        winner={props.winner}\r\n                    ></Status>\r\n                    <MoveHistoryList\r\n                        history={props.history}\r\n                        sequence={props.sequence}\r\n                        locations={props.locations}\r\n                        ascendingOrder={props.ascendingOrder}\r\n                        moveStyle={props.moveStyle}\r\n                        jumpTo={(moveNum) => props.jumpTo(moveNum)}\r\n                        toggleOrder={() => props.toggleOrder()}\r\n                    ></MoveHistoryList>\r\n                </div>\r\n            </div>\r\n    );\r\n}","import React from 'react';\r\n// Helper Functions\r\nimport { calculateWinner } from '../../util/helpers';\r\nimport { highlightWinnerSquares } from '../../util/helpers';\r\n// Pesentational Component\r\nimport { GameRendering } from './GameRendering';\r\n\r\nclass GameContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.initialize();\r\n\r\n        this.handleClickSquare = this.handleClickSquare.bind(this);\r\n        this.jumpTo = this.jumpTo.bind(this);\r\n        this.toggleOrder = this.toggleOrder.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n        this.changePlayerName = this.changePlayerName.bind(this);\r\n    }\r\n\r\n    initialize() {\r\n        return {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                }\r\n            ],\r\n            xIsNext: true,\r\n            winner: null,\r\n            moveNum: 0, \r\n            sequence: [\"start\"],\r\n            locations: [\r\n                {col: 1, row: 1},\r\n                {col: 2, row: 1},\r\n                {col: 3, row: 1},\r\n                {col: 1, row: 2},\r\n                {col: 2, row: 2},\r\n                {col: 3, row: 2},\r\n                {col: 1, row: 3},\r\n                {col: 2, row: 3},\r\n                {col: 3, row: 3},\r\n            ],\r\n            ascendingOrder: true,\r\n            squaresStyle: Array(9).fill(\"square\"), \r\n            moveStyle: [\"bold\"], \r\n            player: {\r\n                \"X\": \"X\", \r\n                \"O\": \"O\",\r\n            },\r\n        }\r\n    };\r\n\r\n    handleClickSquare(i) {\r\n        // Make an immutable copy of the last set of games's moves\r\n        const history = \r\n        this.state.history.slice(0 , this.state.moveNum + 1);\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        // Disable the move if there is a winner \r\n        // or if the square's been marked\r\n        if (this.state.winner || currentSquares[i]) {\r\n            return;\r\n        }\r\n        //Assign the porper value for the clicked square\r\n        currentSquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        // Make an immutable copy of the sequence of \r\n        // the marked positions\r\n        const sequence = \r\n        this.state.sequence.slice(0 , this.state.moveNum + 1);\r\n        //Determine if there is a winner due the last move \r\n        const winnersResult = \r\n            calculateWinner(currentSquares, this.state.player);\r\n        const squaresStyle = \r\n            highlightWinnerSquares(this.state.squaresStyle, \r\n            winnersResult.squares, \"square\", \r\n            \"highlighted-square\");\r\n        const moveStyle = \r\n        this.state.moveStyle.slice(0 , this.state.moveNum + 1).map(() => \"normal\");\r\n        this.setState({\r\n            // Add the last set of game's moves to the array \r\n            // which track game's moves (unlike push() method, \r\n            // concat() method doesn't muatate the \r\n            // original array)\r\n            history: history.concat(\r\n                [\r\n                    {\r\n                        squares: currentSquares,\r\n                    }\r\n                ]\r\n            ),\r\n            xIsNext: !this.state.xIsNext,\r\n            winner: winnersResult.winner, \r\n            moveNum: this.state.moveNum + 1, \r\n            sequence: sequence.concat([i]),\r\n            squaresStyle: squaresStyle,\r\n            moveStyle: moveStyle.concat([\"bold\"]),\r\n        });\r\n    }\r\n    /**\r\n     * Show the move of the indicated moveNum\r\n     */\r\n    jumpTo(moveNum) {\r\n        /**\r\n         * History of the indicated moveNum\r\n         */\r\n        const history = \r\n        this.state.history.slice(0, moveNum + 1);\r\n        /**\r\n         * Squares' state of the picked moveNum\r\n         */\r\n        const currentSquares = \r\n        history[history.length - 1].squares.slice();\r\n        const winnersResult = \r\n            calculateWinner(currentSquares, this.state.player);\r\n        const squaresStyle = \r\n            highlightWinnerSquares(this.state.squaresStyle, \r\n            winnersResult.squares, \"square\", \r\n            \"highlighted-square\");\r\n        const moveStyle = \r\n        this.state.moveStyle.slice().map((style, index) => {\r\n            if (index === moveNum) {\r\n                return \"bold\";\r\n            }\r\n            return \"normal\";\r\n        });\r\n\r\n        this.setState({\r\n            // !(moveNum % 2) this is: because X starts \r\n            // first (moveNum 0) it is even, then module of \r\n            // a even number is 0, evaluated as false which \r\n            // is turned to the opposite by \r\n            // the Logical NOT operator (!) \r\n            xIsNext: !(moveNum % 2), \r\n            winner: winnersResult.winner,\r\n            moveNum: moveNum, \r\n            squaresStyle: squaresStyle,\r\n            moveStyle: moveStyle,\r\n        });\r\n    }\r\n\r\n    toggleOrder() {\r\n        this.setState({\r\n            ascendingOrder: this.state.ascendingOrder ? \r\n            false : true\r\n        });\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState(this.initialize());\r\n    }\r\n\r\n    changePlayerName(e, playerMark) {\r\n        let { target: {value} } = e;\r\n        if (!value) {\r\n            value = playerMark;\r\n        }\r\n        this.setState({\r\n            player: Object.assign(\r\n                {},\r\n                this.state.player,\r\n                { [playerMark]: value }\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <GameRendering \r\n                history={this.state.history}\r\n                xIsNext={this.state.xIsNext} \r\n                winner={this.state.winner}\r\n                moveNum={this.state.moveNum}\r\n                sequence={this.state.sequence} \r\n                locations={this.state.locations} \r\n                ascendingOrder={this.state.ascendingOrder}\r\n                squaresStyle={this.state.squaresStyle}\r\n                moveStyle={this.state.moveStyle}\r\n                player={this.state.player}\r\n                handleClickSquare={(i) => \r\n                    this.handleClickSquare(i)}\r\n                jumpTo={(moveNum) => this.jumpTo(moveNum)}\r\n                toggleOrder={() => this.toggleOrder()}\r\n                resetGame={() => this.resetGame()}\r\n                changePlayerName={(e, playerMark) => \r\n                    this.changePlayerName(e, playerMark)}\r\n            ></GameRendering>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GameContainer from './Components/Game/GameContainer';\r\n\r\nReactDOM.render(\r\n    <GameContainer />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}